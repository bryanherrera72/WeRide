package www.weride.com.amazonaws.mobile.user.signin;
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.16
//

import android.accounts.Account;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.util.Log;
import android.view.View;

import com.google.android.gms.auth.GoogleAuthException;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.auth.api.signin.GoogleSignInStatusCodes;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.Status;
import com.weride.www.awsmobilehelper.auth.IdentityProviderType;
import com.weride.www.awsmobilehelper.auth.signin.SignInProvider;
import com.weride.www.awsmobilehelper.auth.signin.SignInProviderResultsHandler;
import com.weride.www.awsmobilehelper.config.AWSMobileHelperConfiguration;
import com.weride.www.awsmobilehelper.util.ThreadUtils;

import java.io.IOException;

import www.weride.com.amazonaws.mobile.AWSConfiguration;

/**
 * Sign in Provider for Google.
 */
public class GoogleSignInProvider implements SignInProvider {
    /** Log tag. */
    private static final String LOG_TAG = GoogleSignInProvider.class.getSimpleName();

    /** The Cognito login key for Google+ to be used in the Cognito login Map. */
    public static final String COGNITO_LOGIN_KEY_GOOGLE = "accounts.google.com";

    // Arbitrary activity request ID. You can handle this in the main activity,
    // if you want to take action when a google services result is received.
    private static final int REQUEST_GOOGLE_PLAY_SERVICES = 1363;

    /* Request code used to invoke sign in user interactions. */
    private static final int RC_SIGN_IN = 900913;

    /** Client used to interact with Google APIs. */
    private GoogleApiClient mGoogleApiClient;

    /** Android context. */
    private Context context;

    /** Flag indicating Google is handling an intent to connect (sign-in). */
    private boolean mIntentInProgress = false;

    /** The sign-in results adapter from the SignInManager. */
    private SignInProviderResultsHandler resultsHandler;

    /** When signed in, the signed in account, otherwise null. */
    private volatile GoogleSignInAccount signedInAccount = null;

    /** The auth token retrieved when signed-in.  It is good for 6-months from the last service
      * call. */
    private volatile String authToken = null;

    /** User's name. */
    private String userName;

    /** User's image Url. */
    private String userImageUrl;

    /**
     * Constructor. Builds the Google Api Client.
     * @param context context.
     * @param configuration the Mobile Helper Configuration.
     */
    @Override
    public void initialize(final Context context, final AWSMobileHelperConfiguration configuration) {
        this.context = context;

        clearUserInfo();

        Log.d(LOG_TAG, "Initializing Google SDK...");

        final GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestEmail()
            .requestProfile()
            .build();

        // Build GoogleApiClient with access to basic profile
        mGoogleApiClient = new GoogleApiClient.Builder(context)
            .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
            .build();
        mGoogleApiClient.connect();
    }

    @Override
    public IdentityProviderType getProviderType() {
        return IdentityProviderType.GOOGLE;
    }

    /** {@inheritDoc} */
    @Override
    public String getDisplayName() {
        return "Google";
    }

    private boolean handleGoogleSignInResultForIsUserSignedIn(@NonNull final GoogleSignInResult result) {
        final String accountEmail;
        signedInAccount = result.getSignInAccount();
        if (signedInAccount != null) {
            accountEmail = signedInAccount.getEmail();
        } else {
            Log.i(LOG_TAG, "GoogleSignInResult indicates not signed in with an account: "
                + result.getStatus().toString());
            authToken = null;
            return false;
        }

        Log.d(LOG_TAG, "Google sign-in was cached, attempting to retrieve auth token.");
        try {
            authToken = getGoogleAuthToken(accountEmail);
            return true;
        } catch (final Exception ex) {
            Log.w(LOG_TAG, "Couldn't obtain Google Auth token for account.", ex);
            return false;
        }
    }

    /** {@inheritDoc} */
    @Override
    public boolean refreshUserSignInState() {
        final OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);

        if (opr.isDone()) {
            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"
            // and the GoogleSignInResult will be available instantly.

            final GoogleSignInResult result = opr.get();
            if (result == null) {
                Log.d(LOG_TAG, "GoogleSignInResult is null. Not signed-in with Google.");
                return false;
            }

            return handleGoogleSignInResultForIsUserSignedIn(result);
        }

        final GoogleApiAvailability api = GoogleApiAvailability.getInstance();
        final int code = api.isGooglePlayServicesAvailable(context.getApplicationContext());
        if (ConnectionResult.SUCCESS == code) {
            // If the user has not previously signed in on this device or the sign-in has expired,
            // this asynchronous branch will attempt to sign in the user silently.  Cross-device
            // single sign-on will occur in this branch.
            final GoogleSignInResult googleSignInResult = opr.await();
            return handleGoogleSignInResultForIsUserSignedIn(googleSignInResult);
        }

        Log.w(LOG_TAG, "Google Play Services are not available. Assuming not signed-in with Google.");
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public String getCognitoLoginKey() {
        return COGNITO_LOGIN_KEY_GOOGLE;
    }

    /** {@inheritDoc} */
    @Override
    public String getToken() {
        return authToken;
    }

    @Override
    public String refreshToken() {
        Log.d(LOG_TAG, "Google provider refreshing token...");

        try {
            authToken = getGoogleAuthToken(signedInAccount.getEmail());
        } catch (final Exception ex) {
            Log.w(LOG_TAG, "Failed to update Google token", ex);
            authToken = null;
        }
        return authToken;
    }

    private String getGoogleAuthToken(final String accountEmail) throws GoogleAuthException, IOException {
        Log.d(LOG_TAG, "Google provider getting token...");

        final Account googleAccount = new Account(accountEmail, GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
        final String scopes = "audience:server:client_id:" + AWSConfiguration.GOOGLE_CLIENT_ID;

        // Retrieve the Google token.
        final String token = GoogleAuthUtil.getToken(context, googleAccount, scopes);
        // UserRecoverableAuthException will be thrown from GoogleAuthUtil.getToken() if not signed in.

        if (token != null) {
            Log.d(LOG_TAG, "Google Token is OK. Token hashcode = " + token.hashCode());
        } else {
            Log.d(LOG_TAG, "Google Token is NULL.");
        }

        return token;
    }

    /** {@inheritDoc} */
    @Override
    public void signOut() {
        Log.d(LOG_TAG, "Google provider signing out...");

        clearUserInfo();
        final Status status = Auth.GoogleSignInApi.signOut(mGoogleApiClient).await();
        Log.d(LOG_TAG, "signOut:onResult:" + status);
        authToken = null;
    }

    /** {@inheritDoc} */
    @Override
    public boolean isRequestCodeOurs(final int requestCode) {
        return (requestCode == RC_SIGN_IN);
    }

    private void handleGoogleSignInSuccessResult(@NonNull final GoogleSignInResult result) throws
        IOException, GoogleAuthException, GoogleSignInException {

        final String accountEmail;
        signedInAccount = result.getSignInAccount();
        if (signedInAccount != null) {
            accountEmail = signedInAccount.getEmail();
        } else {
            Log.i(LOG_TAG, "GoogleSignInResult indicates not signed in with an account.");
            final GoogleSignInException ex = new GoogleSignInException(result);
            Log.d(LOG_TAG, ex.getMessage(), ex);

            authToken = null;
            throw ex;
        }

        authToken = getGoogleAuthToken(accountEmail);
    }

    /** {@inheritDoc} */
    @Override
    public void handleActivityResult(final int requestCode, final int resultCode, final Intent data) {
        if (requestCode == RC_SIGN_IN) {
            mIntentInProgress = false;

            // Result returned from launching the Intent from GoogleSignInApi.getSignInIntent(...);
            final GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
            if (result == null) {
                // This should not happen based on Google's documentation.
                final String errMsg = "GoogleSignInResult was null.";
                Log.wtf(LOG_TAG, errMsg);
                resultsHandler.onError(GoogleSignInProvider.this, new IllegalStateException(errMsg));
                return;
            }

            if (!result.isSuccess()) {
                // if the user canceled
                if (GoogleSignInStatusCodes.SIGN_IN_CANCELLED == result.getStatus().getStatusCode()) {
                    resultsHandler.onCancel(GoogleSignInProvider.this);
                    clearUserInfo();
                    return;
                }

                // If there was a failure, forward it along.
                resultsHandler.onError(GoogleSignInProvider.this,
                    new GoogleSignInException(result));
            }

            Log.i(LOG_TAG, "Successful GoogleSignInResult, status=" + result.getStatus().toString());

            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        handleGoogleSignInSuccessResult(result);
                        Log.d(LOG_TAG, "Google provider sign-in succeeded!");
                        ThreadUtils.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                resultsHandler.onSuccess(GoogleSignInProvider.this);
                            }
                        });
                    } catch (final Exception ex) {
                        final String errMsg = "Error retrieving Google token.";
                        Log.e(LOG_TAG, errMsg);
                        ThreadUtils.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                resultsHandler.onError(GoogleSignInProvider.this, ex);
                            }
                        });
                    }
                }
            }).start();
        }
    }

    /** {@inheritDoc} */
    @Override
    public View.OnClickListener initializeSignInButton(final Activity signInActivity, final View buttonView,
                                                       final SignInProviderResultsHandler resultsHandler) {
        this.resultsHandler = resultsHandler;
        final GoogleApiAvailability api = GoogleApiAvailability.getInstance();
        final int code = api.isGooglePlayServicesAvailable(context.getApplicationContext());

        if (ConnectionResult.SUCCESS != code) {
            if(api.isUserResolvableError(code)) {
                Log.w(LOG_TAG, "Google Play services recoverable error.");
                api.showErrorDialogFragment(signInActivity, code, REQUEST_GOOGLE_PLAY_SERVICES);
            } else {
                final boolean isDebugBuild =
                        (0 != (signInActivity
                                .getApplicationContext()
                                .getApplicationInfo()
                                .flags & ApplicationInfo.FLAG_DEBUGGABLE));

                if (!isDebugBuild) {
                    buttonView.setVisibility(View.GONE);
                } else {
                    Log.w(LOG_TAG, "Google Play Services are not available, but we are showing the Google Sign-in Button, anyway, because this is a debug build.");
                }
            }
            return null;
        }

        final View.OnClickListener listener = new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!mIntentInProgress) {
                    mIntentInProgress = true;
                    Log.d(LOG_TAG, "Launching sign-in activity.");
                    final Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
                    signInActivity.startActivityForResult(signInIntent, RC_SIGN_IN);
                }
            }
        };
        buttonView.setOnClickListener(listener);
        return listener;
    }

    private void clearUserInfo() {
        userName = null;
        userImageUrl = null;
    }

    /** {@inheritDoc} */
    @Override
    public String getUserName() {
        return userName;
    }

    /** {@inheritDoc} */
    @Override
    public String getUserImageUrl() {
        return userImageUrl;
    }

    /** {@inheritDoc} */
    public void reloadUserInfo() {
        userName = signedInAccount.getDisplayName();
        final Uri photoUrl = signedInAccount.getPhotoUrl();
        if (photoUrl != null) {
            Log.d(LOG_TAG, "Successfully Loaded image url.");
            userImageUrl = photoUrl.toString();
        } else {
            Log.w(LOG_TAG, "Failed to load image url.");
            userImageUrl = null;
        }
    }
}
