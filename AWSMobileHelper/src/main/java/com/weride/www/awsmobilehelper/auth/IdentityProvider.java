package com.weride.www.awsmobilehelper.auth;
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.16
//

import android.content.Context;

import  com.weride.www.awsmobilehelper.config.AWSMobileHelperConfiguration;

/**
 * Interface sign-in provider's supported by the IdentityManager must implement.
 */
public interface IdentityProvider {

    /**
     * Method called upon constructing an identity provider for it to handle its initialization.
     *
     * @param context the context.
     * @param configuration the configuration.
     */
    void initialize(Context context, AWSMobileHelperConfiguration configuration);

    /**
     * @return the Identity Provider Type.
     */
    IdentityProviderType getProviderType();

    /**
     * @return the display name for this provider.
     */
    String getDisplayName();

    /**
     * @return the key used by Cognito in its login map when refreshing credentials.
     */
    String getCognitoLoginKey();

    /**
     * Refreshes the state of whether the user is signed-in and returns the updated state.
     * Note: This call may block, so it must not be called from the main thread.
     * @return true if signed in with this provider, otherwise false.
     */
    boolean refreshUserSignInState();

    /**
     * Call getToken to retrieve the access token from successful sign-in with this provider.
     * Note: This call may block if the access token is not already cached.
     * @return the access token suitable for use with Cognito.
     */
    String getToken();

    /**
     * Refreshes the token if it has expired.
     * Note: this call may block due to network access, and must be called from a background thread.
     * @return the refreshed access token, or null if the token cannot be refreshed.
     */
    String refreshToken();

    /**
     * Call signOut to sign out of this provider.
     */
    void signOut();

    /**
     * Gets the user's name, assuming user is signed in.
     * @return user name or null if not signed-in.
     */
    String getUserName();

    /**
     * Gets the user's image url, assuming user is signed in.
     * @return image or null if not signed-in or has no image.
     */
    String getUserImageUrl();

    /**
     * Force the provider to reload user name and image.
     * Note: this is a blocking call.
     */
    void reloadUserInfo();
}
